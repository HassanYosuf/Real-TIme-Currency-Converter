package currencyconverter;

import java.net.URL;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;

/**
 *
 * @author Hassan Yosuf
 */

public class converter extends javax.swing.JFrame {

    /** Creates new form converter */
    public converter() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    @SuppressWarnings("unchecked")
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        curAmount = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        curFrom = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        curTo = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        resultDisplayTime = new javax.swing.JLabel();
        resultDisplay = new javax.swing.JTextField();
//        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Enter Amount:");

        curAmount.setText("1");

        jLabel2.setText("Currency From:");

        jLabel3.setText("Currency To:");

        curFrom.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Euro - EUR", "British Pound - GBP", "United States Dollar - USD", "Australian Dollar - AUD", "Canadian Dollar - CAD", "Swiss Franc - CHF", "Chinese Yuan - CNY", "Hong Kong Dollar - HKD", "Indonesian Rupiah - IDR", "Indian Rupee - INR", "Japanese Yen - JPY", "Thai Baht - THB", "Albanian Lek - ALL", "Algerian Dinar - DZD", "Aluminium Ounces - XAL", "Argentine Peso - ARS", "Aruba Florin - AWG", "Bahamian Dollar - BSD", "Bahraini Dinar - BHD", "Bangladesh Taka - BDT", "Barbados Dollar - BBD", "Belarus Ruble - BYR", "Belize Dollar - BZD", "Bermuda Dollar - BMD", "Bhutan Ngultrum - BTN", "Bolivian Boliviano - BOB", "Botswana Pula - BWP", "Brazilian Real - BRL", "Brunei Dollar - BND", "Bulgarian Lev - BGN", "Burundi Franc - BIF", "Cambodia Riel - KHR", "Cape Verde Escudo - CVE", "Cayman Islands Dollar - KYD", "CFA Franc (BCEAO) - XOF", "CFA Franc (BEAC) - XAF", "Chilean Peso - CLP", "Colombian Peso - COP", "Comoros Franc - KMF", "Copper Pounds - XCP", "Costa Rica Colon - CRC", "Croatian Kuna - HRK", "Cuban Peso - CUP", "Czech Koruna - CZK", "Danish Krone - DKK", "Dijibouti Franc - DJF", "Dominican Peso - DOP", "East Caribbean Dollar - XCD", "Ecuador Sucre - ECS", "Egyptian Pound - EGP", "El Salvador Colon - SVC", "Eritrea Nakfa - ERN", "Estonian Kroon - EEK", "Ethiopian Birr - ETB", "Falkland Islands Pound - FKP", "Fiji Dollar - FJD", "Gambian Dalasi - GMD", "Ghanian Cedi - GHC", "Gibraltar Pound - GIP", "Gold Ounces - XAU", "Guatemala Quetzal - GTQ", "Guinea Franc - GNF", "Guyana Dollar - GYD", "Haiti Gourde - HTG", "Honduras Lempira - HNL", "Hungarian Forint - HUF", "Iceland Krona - ISK", "Iran Rial - IRR", "Iraqi Dinar - IQD", "Israeli Shekel - ILS", "Jamaican Dollar - JMD", "Jordanian Dinar - JOD", "Kazakhstan Tenge - KZT", "Kenyan Shilling - KES", "Korean Won - KRW", "Kuwaiti Dinar - KWD", "Lao Kip - LAK", "Latvian Lat - LVL", "Lebanese Pound - LBP", "Lesotho Loti - LSL", "Liberian Dollar - LRD", "Libyan Dinar - LYD", "Lithuanian Lita - LTL", "Macau Pataca - MOP", "Macedonian Denar - MKD", "Malawi Kwacha - MWK", "Malaysian Ringgit - MYR", "Maldives Rufiyaa - MVR", "Maltese Lira - MTL", "Mauritania Ougulya - MRO", "Mauritius Rupee - MUR", "Mexican Peso - MXN", "Moldovan Leu - MDL", "Mongolian Tugrik - MNT", "Moroccan Dirham - MAD", "Myanmar Kyat - MMK", "Namibian Dollar - NAD", "Nepalese Rupee - NPR", "Neth Antilles Guilder - ANG", "Turkish Lira - TRY", "New Zealand Dollar - NZD", "Nicaragua Cordoba - NIO", "Nigerian Naira - NGN", "North Korean Won - KPW", "Norwegian Krone - NOK", "Omani Rial - OMR", "Pacific Franc - XPF", "Pakistani Rupee - PKR", "Palladium Ounces - XPD", "Panama Balboa - PAB", "Papua New Guinea Kina - PGK", "Paraguayan Guarani - PYG", "Peruvian Nuevo Sol - PEN", "Philippine Peso - PHP", "Platinum Ounces - XPT", "Polish Zloty - PLN", "Qatar Rial - QAR", "Romanian New Leu - RON", "Russian Rouble - RUB", "Rwanda Franc - RWF", "Samoa Tala - WST", "Sao Tome Dobra - STD", "Saudi Arabian Riyal - SAR", "Seychelles Rupee - SCR", "Sierra Leone Leone - SLL", "Silver Ounces - XAG", "Singapore Dollar - SGD", "Slovak Koruna - SKK", "Slovenian Tolar - SIT", "Solomon Islands Dollar - SBD", "Somali Shilling - SOS", "South African Rand - ZAR", "Sri Lanka Rupee - LKR", "St Helena Pound - SHP", "Sudanese Pound - SDG", "Swaziland Lilageni - SZL", "Swedish Krona - SEK", "Syrian Pound - SYP", "Taiwan Dollar - TWD", "Tanzanian Shilling - TZS", "Tonga Pa'ang - TOP", "Trinidad & Tobago Dollar - TTD", "Tunisian Dinar - TND", "UAE Dirham - AED", "Ugandan Shilling - UGX", "Ukraine Hryvnia - UAH", "Uruguayan New Peso - UYU", "Vanuatu Vatu - VUV", "Venezuelan Bolivar Fuerte - VEF", "Vietnam Dong - VND", "Yemen Riyal - YER", "Zambian Kwacha - ZMK", "Zimbabwe dollar - ZWD" };
            @Override
            public int getSize() { return strings.length; }
            @Override
            public Object getElementAt(int i) { return strings[i]; }
        });
        curFrom.setSelectedIndex(1);
        jScrollPane1.setViewportView(curFrom);

        curTo.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Euro - EUR", "British Pound - GBP", "United States Dollar - USD", "Australian Dollar - AUD", "Canadian Dollar - CAD", "Swiss Franc - CHF", "Chinese Yuan - CNY", "Hong Kong Dollar - HKD", "Indonesian Rupiah - IDR", "Indian Rupee - INR", "Japanese Yen - JPY", "Thai Baht - THB", "Albanian Lek - ALL", "Algerian Dinar - DZD", "Aluminium Ounces - XAL", "Argentine Peso - ARS", "Aruba Florin - AWG", "Bahamian Dollar - BSD", "Bahraini Dinar - BHD", "Bangladesh Taka - BDT", "Barbados Dollar - BBD", "Belarus Ruble - BYR", "Belize Dollar - BZD", "Bermuda Dollar - BMD", "Bhutan Ngultrum - BTN", "Bolivian Boliviano - BOB", "Botswana Pula - BWP", "Brazilian Real - BRL", "Brunei Dollar - BND", "Bulgarian Lev - BGN", "Burundi Franc - BIF", "Cambodia Riel - KHR", "Cape Verde Escudo - CVE", "Cayman Islands Dollar - KYD", "CFA Franc (BCEAO) - XOF", "CFA Franc (BEAC) - XAF", "Chilean Peso - CLP", "Colombian Peso - COP", "Comoros Franc - KMF", "Copper Pounds - XCP", "Costa Rica Colon - CRC", "Croatian Kuna - HRK", "Cuban Peso - CUP", "Czech Koruna - CZK", "Danish Krone - DKK", "Dijibouti Franc - DJF", "Dominican Peso - DOP", "East Caribbean Dollar - XCD", "Ecuador Sucre - ECS", "Egyptian Pound - EGP", "El Salvador Colon - SVC", "Eritrea Nakfa - ERN", "Estonian Kroon - EEK", "Ethiopian Birr - ETB", "Falkland Islands Pound - FKP", "Fiji Dollar - FJD", "Gambian Dalasi - GMD", "Ghanian Cedi - GHC", "Gibraltar Pound - GIP", "Gold Ounces - XAU", "Guatemala Quetzal - GTQ", "Guinea Franc - GNF", "Guyana Dollar - GYD", "Haiti Gourde - HTG", "Honduras Lempira - HNL", "Hungarian Forint - HUF", "Iceland Krona - ISK", "Iran Rial - IRR", "Iraqi Dinar - IQD", "Israeli Shekel - ILS", "Jamaican Dollar - JMD", "Jordanian Dinar - JOD", "Kazakhstan Tenge - KZT", "Kenyan Shilling - KES", "Korean Won - KRW", "Kuwaiti Dinar - KWD", "Lao Kip - LAK", "Latvian Lat - LVL", "Lebanese Pound - LBP", "Lesotho Loti - LSL", "Liberian Dollar - LRD", "Libyan Dinar - LYD", "Lithuanian Lita - LTL", "Macau Pataca - MOP", "Macedonian Denar - MKD", "Malawi Kwacha - MWK", "Malaysian Ringgit - MYR", "Maldives Rufiyaa - MVR", "Maltese Lira - MTL", "Mauritania Ougulya - MRO", "Mauritius Rupee - MUR", "Mexican Peso - MXN", "Moldovan Leu - MDL", "Mongolian Tugrik - MNT", "Moroccan Dirham - MAD", "Myanmar Kyat - MMK", "Namibian Dollar - NAD", "Nepalese Rupee - NPR", "Neth Antilles Guilder - ANG", "Turkish Lira - TRY", "New Zealand Dollar - NZD", "Nicaragua Cordoba - NIO", "Nigerian Naira - NGN", "North Korean Won - KPW", "Norwegian Krone - NOK", "Omani Rial - OMR", "Pacific Franc - XPF", "Pakistani Rupee - PKR", "Palladium Ounces - XPD", "Panama Balboa - PAB", "Papua New Guinea Kina - PGK", "Paraguayan Guarani - PYG", "Peruvian Nuevo Sol - PEN", "Philippine Peso - PHP", "Platinum Ounces - XPT", "Polish Zloty - PLN", "Qatar Rial - QAR", "Romanian New Leu - RON", "Russian Rouble - RUB", "Rwanda Franc - RWF", "Samoa Tala - WST", "Sao Tome Dobra - STD", "Saudi Arabian Riyal - SAR", "Seychelles Rupee - SCR", "Sierra Leone Leone - SLL", "Silver Ounces - XAG", "Singapore Dollar - SGD", "Slovak Koruna - SKK", "Slovenian Tolar - SIT", "Solomon Islands Dollar - SBD", "Somali Shilling - SOS", "South African Rand - ZAR", "Sri Lanka Rupee - LKR", "St Helena Pound - SHP", "Sudanese Pound - SDG", "Swaziland Lilageni - SZL", "Swedish Krona - SEK", "Syrian Pound - SYP", "Taiwan Dollar - TWD", "Tanzanian Shilling - TZS", "Tonga Pa'ang - TOP", "Trinidad & Tobago Dollar - TTD", "Tunisian Dinar - TND", "UAE Dirham - AED", "Ugandan Shilling - UGX", "Ukraine Hryvnia - UAH", "Uruguayan New Peso - UYU", "Vanuatu Vatu - VUV", "Venezuelan Bolivar Fuerte - VEF", "Vietnam Dong - VND", "Yemen Riyal - YER", "Zambian Kwacha - ZMK", "Zimbabwe dollar - ZWD" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        curTo.setSelectedIndex(1);
        jScrollPane2.setViewportView(curTo);

        jButton1.setText("Convert");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        resultDisplayTime.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N

        resultDisplay.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        resultDisplay.setForeground(new java.awt.Color(204, 0, 51));
        resultDisplay.setEnabled(false);    

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(curAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 110, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(jLabel2)
                        .addGap(118, 118, 118)
                        .addComponent(jLabel3)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(resultDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(73, 73, 73)
                                .addComponent(resultDisplayTime, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)))
                        .addGap(22, 22, 22))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(curAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
//                    .addComponent(jButton2)
                )
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(resultDisplayTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(resultDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       // Get the amount to convert
       String curAmountText = curAmount.getText();
       // Check for numbers only
       for(int i=0;i < curAmountText.length();i++)
       {
           if(!Character.isDigit(curAmountText.charAt(i)))
           {
               JOptionPane.showMessageDialog(this, "Please enter a valid amount!");
               curAmount.requestFocus();
               return;
           }
       }

       resultDisplay.setText("");

       // Get curreny from and to
       String curFromText   = curFrom.getSelectedValue().toString();
       String curToText     = curTo.getSelectedValue().toString();

       
       String[] temp = curFromText.split(" - ");
   
       String curFromTitle = temp[0];
       String curFromCode = temp[1];

       temp = curToText.split(" - ");
       String curToTitle = temp[0];
       String curToCode = temp[1];

       String URL = "http://finance.yahoo.com/q/bc?s=" + curFromCode + "" + curToCode + "=X&t=5d&l=on&z=m&q=l&c=";

        try {
            // Fetch results from Yahoo
            String results = "";
            URL thePage = new URL(URL);
           try (BufferedReader in = new BufferedReader(new InputStreamReader(thePage.openStream()))) {
               String inputLine;
               
               while ((inputLine = in.readLine()) != null) {
                   // Process each line.
                   results = results + inputLine;
               }
           }
            // Parrent matching
            Pattern finalPattern = Pattern.compile("x\">([0-9.]+)</span>");
            Matcher matchFind = finalPattern.matcher(results);
            matchFind.find();

            double curRate = Double.parseDouble(matchFind.group(1));
            double totalConvert = curRate * Double.parseDouble(curAmount.getText());

            // Trade Time Matching
            finalPattern = Pattern.compile("<span id=\"yfs_t10_[a-zA-Z]+=x\">(.*)</span>:");
            matchFind = finalPattern.matcher(results);
            matchFind.find();

            resultDisplay.setText(String.format("%,.2f", totalConvert));
            resultDisplayTime.setText("Per Trade Time: "+matchFind.group(1));
       } catch (IOException | NumberFormatException e) {
           // Do error handling
           JOptionPane.showMessageDialog(this, "Unable to connect to Yahoo Finance!");
       }
    }

   

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new converter().setVisible(true);
            }
        });
    }

    // Variables declaration
    private javax.swing.JTextField curAmount;
    private javax.swing.JList curFrom;
    private javax.swing.JList curTo;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField resultDisplay;
    private javax.swing.JLabel resultDisplayTime;

}